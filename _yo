#compdef yo
#autoload

# @description  yo zsh completion
# @require        'yo' to be installed

# File to store npm search results
local generatorCache="$ZSH_CUSTOM/plugins/yeoman/npm-generator.cache"

local state line context
# $opt_args is an associative array that contains command-line options like -d or -f
# as its keys and the actual parameters to those options (if any) as its values
local -A opt_args

local -a arguments
arguments=(
    '--help[show the help message and quit]'
    '--version[show version information and quit]'
    '*:: :->cmds'
)



# @description run a NPM search in the background and store results in "$generatorCache"
# @param    $1|$generatorCache  File to store npm search results
# @return    void
cacheGeneratorList() {
    local generatorCache="$1"
    local keywords=( yeoman generator )

    rm "$generatorCache" # rm on plugin/zsh reload

    for k in "${keywords[@]}"; do
        npm search "$k" >> "$generatorCache"
    done
}
# @description get the list of generators. If generatorCache is available use it, otherwise use default values
# @param    $1|$generatorCache  File to store npm search results
# @return    void
getGeneratorList() {
    if [[ -s "$generatorCache" ]] ; then # file exists and is not empty.
        {
            read # skip first line
            # printf "generatorCache[non-empty]: %s\n" "$generatorCache"
            while IFS=' ' read -r generator junk; do
                # printf "generator: %s\n" "$generator"
                cmds+=("$generator");
            done
        } < "$generatorCache"
    else
        # printf "no generatorCache\n"
        cmds=(
            generator-angular:'Yeoman generator for AngularJS'
            generator-backbone-amd:'generator-backbone-amd'
            generator-bootstrap:'Yeoman generator for Twitter Bootstrap'
            # chromeapp
            # chrome-extension
            ember:'Ember - JavaScript Application Framework'
            # jasmine
            generator-mocha:'Yeoman generator for Mocha'
            generator-testacular:'Yeoman generator for Testacular'
            generator-webapp:'Default Yeoman generator for scaffolding out a front-end web app'
        )
    fi
}


# @description  manage completion for first argument
# @param    $1|$argLevel2  list of ${words[@]}
# @param    $2|$generatorCache        File to store npm search results
# @return    void
completeArgOne() {
    local state="$1"
    local generatorCache="$2"
    local -a cmds # available "downwards", i.e. in getGeneratorList()

    case $state in
        "cmds")
            local -a cmds
            getGeneratorList
            _describe -t commands "command list" cmds
        ;;
    esac
}


_arguments -C $arguments && ret=0

completeArgOne "$state" "$generatorCache" # manage completion for first argument

return ret
