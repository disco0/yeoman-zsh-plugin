#compdef yo
#autoload

# @description  yo zsh completion
# @require        'yo' to be installed

# File to store npm search results
local generatorCache="$ZSH_CUSTOM/plugins/yeoman/npm-generator.cache"

local state line context
# $opt_args is an associative array that contains command-line options like -d or -f
# as its keys and the actual parameters to those options (if any) as its values
local -A opt_args

local -a arguments

arguments \
  '(--help)--help[show the help message and quit]' \
  '(--version)--version[show version information and quit]' \
  '*:: :->subcmds' && return 0


# @description run a NPM search in the background and store results in "$generatorCache"
# @param    $1|$generatorCache  File to store npm search results
# @return    void
cacheGeneratorList() {
    local generatorCache="$1"
    local keywords=( yeoman generator )

    rm "$generatorCache" # rm on plugin/zsh reload

    for k in "${keywords[@]}"; do
        npm search "$k" >> "$generatorCache"
    done
}


# @description get the list of generators. If cache is available use it, otherwise use default values
# @param    $1|$generatorCache  File to store npm search results
# @return    void
getGeneratorList() {
    local generatorCache="$1"
    local arguments=()

    if [[ -e "$generatorCache" ]]; then
        while IFS=' ' read -r generator _ ; do
            arguments+=("$generator");
        done < "$generatorCache"
    else
        arguments=(
            generator-angular:'Yeoman generator for AngularJS'
            generator-backbone-amd:'generator-backbone-amd'
            generator-bootstrap:'Yeoman generator for Twitter Bootstrap'
            # chromeapp
            # chrome-extension
            ember:'Ember - JavaScript Application Framework'
            # jasmine
            generator-mocha:'Yeoman generator for Mocha'
            generator-testacular:'Yeoman generator for Testacular'
            generator-webapp:'Default Yeoman generator for scaffolding out a front-end web app'
        )
    fi
    echo "${arguments[@]}"
}


# create a cache for the list of generator
cacheGeneratorList


_arguments -C $arguments && ret=0

return ret
